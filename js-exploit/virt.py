#! /usr/bin/env python3

# Debugging script: writes physical address information into the JavaScript
# buffers

import sys
import time
import random
import os
import subprocess

GB = 2 ** 30
MB = 2 ** 20
KB = 2 ** 10

pid = subprocess.run(
    ["pgrep", "js"], encoding="utf-8", stdout=subprocess.PIPE
).stdout.strip()

dbg = open("./maps.dbg.err", mode="w")
dbg.truncate()


def parse_line(line):
    assert len(line) == 5
    line = line[:2]
    base, end = map(lambda x: int(x, 16), line[0].split("-"))
    return [base, end, end - base]


def pfn_get(pagemap, virt):
    pagemap.seek((virt >> 12) * 8)
    entry = int.from_bytes(pagemap.read(8), byteorder="little")
    assert entry & 0x1C00000000000000 == 0x0
    # NOTE: will not fail even if we don't have sudo!
    if entry & 0x8000000000000000 == 0x0:
        # Soft dirty (bit 55) or being removed
        return 0
    else:
        pfn = entry & 0x7FFFFFFFFFFFFF
        assert pfn  # No sudo!?
        return pfn


g = open("/proc/" + pid + "/pagemap", mode="rb")
devmem = open("/dev/mem", mode="rb+")


def read_phys(phys, width):
    #  assert phys & 0x3 == 0
    devmem.seek(phys, 0)
    val = int.from_bytes(devmem.read(width), byteorder="little", signed=False)
    return val


def write_phys(phys, val, width):
    devmem.seek(phys, 0)
    assert (
        devmem.write(val.to_bytes(width, byteorder="little", signed=False))
        == width
    )


def read_virt(virt, width):
    phys = (pfn_get(g, virt) << 12) + (virt & ((1 << 12) - 1))
    return read_phys(phys, width)


for line in sys.stdin:
    virt = int(line.strip(), base=16) & ((1 << 47) - 1)
    for i in range(0, 30):
        print(
            i,
            hex(virt + i * 8),
            hex(read_virt(virt + i * 8, 8)),
            #  read_virt(virt, 8).to_bytes(8, "little").decode("utf-8"),
        )
